MMO 관계형 데이터 베이스를 사용한다.
R(Relational)DB MS를 조작하기 위한 명령어
 T-SQL로 명칭이 바뀐다. 최대한 표준 SQL로 바꿔야함.
CRUD(Create-Read-Update-Delete)

nvarchar - n은 유니코드로 해석
DB는 깊게 이해하고 접근해야한다. 게임의 경우DB속도로도
게임 진행에 대해 큰 영향을 끼친다.

SUBSTRING :문자열 추출
날짜는 문자열로 들어가는데, 

FROM-> WHERE-> GROUP BY(분류)-> HAVING(분류 후 조건)-> SELECT->ORDER BY
PRIMARY KEY-> 인덱스에서 다루며 보면 열쇠 표시가 뜬다.
많은 데이터들에서 빠르게 찾기 위해 정렬시켜 두는 기준

정규화->테이블을 왜 분할 설계를 하는가?
아이템 코드외에 고유 아이디가 또 있어야 한다.
중복된 데이터가 발생하는 것을 부정적으로 생각해야함.


인덱스 ->이해를 못하면 DB를 이해하지 못 한것.
특정 데이터를 쉽게 찾기 위해 위치를 지정해 두는것
기본 이진 검색트리를 사용한다.
중복데이터가 없는 항목에 인덱스를 걸어야 한다.
PRIMARY KEY는 CLUSTERED INDEX이다. 테이블당 1개만 존재
-> 물리적인 데이터 저장 순서의 기준
NON CLUSTERED INDEX
-> 따로 관리하는 Look up 테이블

JOIN(결합) -일반적으로 데이터를 저장할 때 연관되게 분산해서 저장을 함.
그렇기에 조립하여 유의미한 데이터를 추출해야 하기에 중요하다.
-INNER JOIN (두개의 테이블을 가로로 결합+ 결합 기준을 ON으로)
  playerID가 players, salaries 양쪽 다 있고 일치하는 애들을 결합
  한쪽에라도 없으면 INNER JOIN에서 걸러진다.
-LEFT JOIN (두개의 테이블을 가로로 결합+결합 기준을 ON으로
  playerID 가 왼쪽(LEFT)에 있으면 무조건 표시, 
  오른쪽(salaries)에 없으면 오른쪽 정보는 NULL표시
-RIGHT JOIN (두개의 테이블을 가로로 결합+결합 기준을 ON으로
  playerID 가 오른쪽(RIGHT)에 있으면 무조건 표시,
  왼쪽(players)에 없으면 왼쪽 정보는 NULL표시


TRANSACTION
- 동시에 여러 테이블을 갱신 시킬 때 수정을 하다 문제가 발생하여
한 테이블에 문제가 생길 경우가 있다.
- 원자성 해당 단계가 한번에 동작을 해야함.!! TRAN의 기능이다.
--COMMIT을 하기 전까지는 임시공간에 적어 실행하는 것이다.
--TRAN을 동작시키면 BEGIN,ROLLBACK을 안해주면 다른 쿼리에서
  실행을 못 하도록 LOCK이 작동한다.

윈도우 함수
- 행들의 서브 집합을 대상으로, 각 행별로 계산을 해서 스칼라 값을 출력하는 함수
-Grouping과 비슷한가? 하지만 다르게 사용이 된다.
 그룹핑은 기본적으로 집계함수에 포함되어야 하는데 윈도우 함수는 별개다.

-------------------------------------------------- 회사 과제물
저장프로시저-DBMS에서 제공하는 프로그램 SQL
DB기능 이지만 프로그램이기 때문에 간단한 문법
인 IF, WHILE 등 프로그래밍 문법을 사용할 수 있고
프로시저를 호출할 때 매개변수를 받거나 전달

COUNT(*)OVER(PARTITION BY charunique) 
를 해줘야 숫자를 해야 원하는 부분만 숫자셀 수 있음.

Index, Transaction(트랜잭션) 
        캐릭터유니크


skillindex
 lv 10까지만 공짜고 한번을 더 사용해야 ->11
공짜로 11로 올라가는 스킬 + 버그찾기
i32index - 4
i32item index- 14

[charunique]  ,[skillindex]
217,801,211,215